#include <string.h>
#include <stdio.h>
#include <unistd.h>
#include <he/log.h>
#include <he/xor8.h>
#include <he/file.h>
#include "mqtt.hh"

#define MQTT_QOS    2

using namespace mosqpp;

static uint8_t mqtt_ca[] = {
0x2D,0x1C,0x4F,0x7E,0xE9,0xB7,0xE3,0xD0,
0xF0,0xC6,0xFB,0xA9,0x38,0x1E,0x4B,0x67,
0x05,0x3B,0x62,0x51,0xD3,0xF3,0xC8,0xF9,
0xD7,0xE6,0xB5,0xA3,0x73,0x46,0x15,0x29,
0xC9,0xF3,0xA7,0x96,0x03,0x1A,0x61,0x52,
0x7C,0x5F,0x1E,0x09,0xCE,0xE5,0xE3,0x91,
0x9F,0x8E,0x88,0xE6,0x56,0x5A,0x22,0x1C,
0x3E,0x2A,0x75,0x5E,0xD0,0xE2,0xB3,0xAC,
0x04,0x7B,0x6F,0x2C,0xB8,0x99,0xCE,0xEC,
0xC5,0xF1,0xA4,0xB2,0x0D,0x20,0x51,0x64,
0x3D,0x1E,0x45,0x69,0xEC,0xDA,0x89,0xAE,
0x82,0x81,0xEF,0xD0,0x09,0x66,0x0B,0x15,
0xE8,0xC7,0x9B,0xA9,0x38,0x0F,0x2C,0x79,
0x47,0x70,0x21,0x26,0x8C,0xA5,0x97,0xC3,
0x90,0xAB,0xF7,0xCF,0x79,0x6F,0x6C,0x5A,
0x2F,0x3D,0x71,0x57,0xF2,0xF0,0x90,0x8F,
0x3E,0x1D,0x49,0x78,0xF6,0xCB,0x9D,0x85,
0x97,0x93,0xE6,0xC6,0x72,0x61,0x08,0x3C,
0x55,0x6A,0x31,0x2F,0xB1,0x81,0xDE,0xC5,
0xC7,0xF0,0xD3,0x86,0x01,0x7F,0x65,0x70,
0x8B,0x8E,0xD0,0x9F,0x5B,0x71,0x19,0x11,
0x04,0x3E,0x65,0x71,0xCF,0xE6,0xA1,0x93,
0xCC,0xC3,0x9C,0x87,0x35,0x08,0x54,0x79,
0x32,0x40,0x20,0x14,0x9B,0xB7,0xF6,0xC0,
0x16,0x32,0x61,0x55,0xD5,0xF6,0xB0,0x86,
0xB0,0xB6,0xF8,0xC7,0x7B,0x6E,0x1E,0x1E,
0x34,0x4D,0x29,0x13,0x85,0x89,0xEF,0xF9,
0xDE,0xFB,0x90,0xAA,0x34,0x32,0x11,0x67,
0xAB,0xBE,0xC2,0xD4,0x72,0x04,0x1E,0x19,
0x3C,0x0C,0x62,0x66,0xD6,0xDC,0xA9,0xA0,
0xC6,0xFE,0x9A,0x9C,0x2C,0x39,0x45,0x58,
0x7D,0x3E,0x21,0x2B,0x85,0x8F,0xD7,0xEE,
0x67,0x7F,0x34,0x11,0x85,0xAC,0xF2,0xD6,
0xD2,0xC6,0x94,0xA7,0x2F,0x05,0x68,0x6B,
0x02,0x2B,0x65,0x46,0xD6,0xE7,0xAC,0x90,
0xBB,0xA7,0xD0,0xCD,0x69,0x49,0x29,0x67,
0xDC,0x87,0xB6,0xA3,0x20,0x1E,0x43,0x69,
0x7A,0x5A,0x1C,0x3C,0xB9,0xAD,0xD7,0xFE,
0x87,0xB5,0xC4,0xDB,0x42,0x76,0x2D,0x3D,
0x26,0x1A,0x2B,0x4E,0xD9,0xCE,0x8C,0x9E,
0x70,0x5D,0x2C,0x19,0xBA,0x99,0xC2,0xEE,
0xD2,0xE4,0xB7,0x9C,0x04,0x30,0x6B,0x20,
0x2C,0x35,0x59,0x61,0xF7,0xCA,0xB3,0xAE,
0x86,0xC7,0xF0,0xD1,0x40,0x45,0x16,0x13,
0xB1,0xDB,0xE9,0xAD,0x07,0x0A,0x77,0x6D,
0x4F,0x71,0x07,0x1F,0x90,0xB5,0xE5,0xD8,
0xB5,0x8B,0xCF,0xE5,0x7E,0x58,0x6D,0x25,
0x73,0x3D,0x6A,0x5B,0xC7,0xFD,0x8D,0x97,
0x34,0x09,0x7F,0x42,0xCF,0xE7,0xB7,0x84,
0x84,0xCB,0xD6,0xA0,0x45,0x77,0x34,0x11,
0x7F,0x49,0x1A,0x25,0xBE,0x8D,0xCE,0x96,
0xC1,0xFC,0xAB,0x9A,0x06,0x36,0x41,0x5C,
0xBF,0xC7,0xDF,0xFE,0x7D,0x48,0x22,0x27,
0x2D,0x2D,0x75,0x7C,0xC7,0xF5,0x80,0xB0,
0x94,0xED,0xEB,0xD4,0x32,0x0D,0x5E,0x5C,
0x4F,0x7B,0x37,0x66,0x86,0xC4,0xF6,0xA9,
0x71,0x2F,0x11,0x7C,0xEB,0xE5,0xA0,0x88,
0xA4,0x8D,0xA9,0xD8,0x6A,0x59,0x2A,0x1B,
0x34,0x01,0x30,0x64,0xF0,0x98,0xF6,0xF2,
0xDB,0xB4,0xBA,0xDA,0x1A,0x3E,0x56,0x78,
0xAB,0xC0,0xA9,0xE5,0x66,0x06,0x25,0x24,
0x35,0x24,0x62,0x04,0xD0,0xDE,0xAD,0xA7,
0xCB,0xFB,0x93,0x93,0x7E,0x40,0x1D,0x72,
0x09,0x4F,0x11,0x43,0xAD,0x99,0xD6,0xE2,
0x39,0x75,0x12,0x15,0xAA,0x8C,0xE0,0xB8,
0xF6,0xC3,0x8F,0x8C,0x0B,0x3B,0x68,0x57,
0x34,0x15,0x48,0x69,0xEB,0xF9,0x83,0x92,
0xBE,0xAE,0xF5,0xEC,0x48,0x4A,0x69,0x5B,
0xE4,0xD0,0xAD,0xDF,0x0D,0x4B,0x11,0x68,
0x09,0x47,0x13,0x2B,0xCE,0xF9,0xAC,0xC3,
0x8C,0xBE,0xF0,0xDC,0x52,0x40,0x10,0x1B,
0x11,0x23,0x5A,0x40,0xF5,0xBF,0xEA,0xC4,
0x56,0x49,0x1C,0x1B,0x81,0xFC,0xD5,0xC2,
0xF0,0xE3,0xBF,0xBC,0x13,0x07,0x6E,0x43,
0x3B,0x22,0x54,0x7D,0xF7,0xC6,0xF7,0x85,
0x9D,0xA5,0xD0,0xEC,0x3B,0x7A,0x0E,0x1B,
0xD3,0xC9,0xE8,0xBA,0x75,0x36,0x79,0x64,
0x29,0x65,0x52,0x08,0x8B,0xAF,0xF7,0xA7,
0xA8,0x8C,0xAB,0xC8,0x6E,0x61,0x19,0x17,
0x13,0x1D,0x56,0x57,0xCD,0xD6,0xD2,0xE7,
0x4C,0x20,0x62,0x5A,0xEB,0xBA,0xB0,0x9C,
0x93,0xBC,0xEE,0xF4,0x6A,0x02,0x2C,0x33,
0x7C,0x6F,0x62,0x22,0x8A,0xBE,0xFD,0xE7,
0xE8,0x84,0x94,0xA5,0x71,0x16,0x41,0x75,
0xAB,0x9B,0xA7,0xFC,0x59,0x03,0x17,0x04,
0x2C,0x25,0x51,0x54,0xB8,0xFD,0xA4,0x9F,
0xF7,0xEC,0xB8,0xDD,0x4C,0x73,0x6B,0x1C,
0x5F,0x7B,0x27,0x32,0xB3,0xDC,0xD7,0xFB,
0x15,0x0F,0x66,0x40,0xF7,0xD0,0x8E,0x92,
0x8D,0xA6,0xDF,0xC6,0x78,0x67,0x19,0x2A,
0x5C,0x4C,0x51,0x3A,0x85,0x88,0x94,0xD7,
0xFF,0xC7,0xBB,0xB8,0x3F,0x27,0x5F,0x43,
0xAA,0x9E,0x8C,0xDB,0x41,0x47,0x6D,0x62,
0x48,0x24,0x42,0x7E,0xD1,0xD7,0x96,0x83,
0xB3,0xE7,0xA4,0xE6,0x35,0x18,0x7C,0x5B,
0x14,0x3B,0x29,0x0B,0x94,0xF8,0xC5,0xFF,
0x77,0x78,0x26,0x12,0x95,0xB4,0xE4,0xDA,
0xF8,0xB8,0x9C,0xA9,0x2E,0x3D,0x58,0x7D,
0x0A,0x10,0x12,0x54,0xD6,0xF3,0xA7,0x96,
0xAB,0x9E,0xD9,0xE8,0x0A,0x46,0x1E,0x2C,
0xD7,0xF5,0xCF,0x8F,0x34,0x4B,0x49,0x1B,
0x66,0x6D,0x09,0x39,0xAB,0x8C,0xAC,0xDF,
0x83,0xB2,0xF4,0xE4,0x33,0x58,0x17,0x1D,
0x25,0x78,0x73,0x49,0xEB,0xEA,0x9C,0xBD,
0x79,0x54,0x25,0x59,0x9B,0x8D,0xD6,0xE4,
0xF7,0xC1,0x87,0xB6,0x25,0x26,0x6E,0x71,
0x4F,0x0A,0x2C,0x14,0xDD,0xF8,0x9F,0xBE,
0xF6,0x92,0x9D,0xA3,0x5A,0x7D,0x2A,0x0A,
0xED,0xD9,0x95,0x9C,0x16,0x7C,0x59,0x03,
0x08,0x00,0x56,0x34,0xA5,0x94,0xD0,0xBA,
0xAE,0x9B,0xFD,0xE0,0x6A,0x60,0x66,0x44,
0x30,0x31,0x50,0x53,0xC9,0xF3,0xAB,0xFD,
0x35,0x7B,0x75,0x7C,0xEA,0xC5,0x8C,0xD4,
0x80,0x98,0xD8,0xA5,0x54,0x71,0x00,0x0E,
0x57,0x79,0x19,0x39,0x8A,0xA0,0xD1,0xDF,
0xEC,0xF4,0xA9,0xA2,0x7C,0x03,0x6E,0x71,
0xCD,0x8E,0xFF,0x98,0x49,0x70,0x1D,0x0E,
0x73,0x7E,0x49,0x70,0xF9,0xE6,0x8D,0x96,
0xD5,0xDE,0xB4,0xDB,0x3E,0x05,0x51,0x1E,
0x6B,0x7C,0x05,0x0F,0xBB,0x80,0x99,0xA9,
0x37,0x1C,0x4E,0x76,0xF7,0xFC,0xD3,0xA9,
0xBA,0xBE,0xC4,0xCE,0x5B,0x7F,0x22,0x2A,
0x6D,0x5B,0x04,0x24,0x88,0xC1,0xEE,0xC2,
0xED,0xFF,0x99,0x83,0x0E,0x1C,0x4B,0x1F,
0x95,0xC5,0xE2,0xDE,0x76,0x67,0x17,0x14,
0x2F,0x07,0x10,0x7F,0xF5,0xBE,0xBB,0x9B,
0xEE,0xD2,0xAC,0x80,0x36,0x1B,0x1C,0x60,
0x6C,0x33,0x69,0x3F,0xBE,0x9C,0xDB,0xDF,
0x78,0x1A,0x28,0x14,0x8B,0xB6,0xDC,0xAF,
0xE1,0xEA,0x82,0x84,0x0D,0x38,0x51,0x62,
0x30,0x1F,0x6E,0x26,0xED,0x8E,0xDC,0xA2,
0x90,0xA7,0xEE,0xCA,0x49,0x63,0x2C,0x54,
0xE8,0xC6,0x86,0xBB,0x0D,0x1D,0x46,0x4B,
0x4A,0x3D,0x3F,0x66,0xB7,0xA6,0xFF,0xFB,
0xA9,0x93,0x93,0xE7,0x52,0x07,0x19,0x17,
0x44,0x05,0x48,0x62,0xC0,0xD3,0x9D,0x88,
0x05,0x27,0x2D,0x20,0xB3,0xFA,0xD7,0xCD,
0xF7,0xDA,0x85,0x84,0x14,0x49,0x75,0x61,
0x24,0x3B,0x4C,0x69,0xFB,0xC3,0x8D,0x86,
0xF7,0x82,0x8E,0xF2,0x42,0x03,0x20,0x1C,
0xDD,0xCC,0xAD,0xB0,0x11,0x79,0x49,0x43,
0x61,0x72,0x3A,0x66,0xCC,0x86,0xED,0xA2,
0xC1,0xA6,0xCF,0x9D,0x7B,0x6C,0x24,0x1D,
0x07,0x3E,0x77,0x58,0xC6,0xBE,0xCA,0xFB,
0x57,0x66,0x35,0x6C,0xF0,0xCB,0xFC,0xAE,
0x86,0xA0,0xF5,0xD9,0x41,0x7F,0x26,0x15,
0x6D,0x4D,0x76,0x47,0xD0,0xE1,0xB2,0xA4
};

static uint8_t mqtt_cert[] = {
0x2D,0x1C,0x4F,0x7E,0xE9,0xB7,0xE3,0xD0,
0xF0,0xC6,0xFB,0xA9,0x38,0x1E,0x4B,0x67,
0x05,0x3B,0x62,0x51,0xD3,0xF3,0xC8,0xF9,
0xD7,0xE6,0xB5,0xA3,0x73,0x46,0x15,0x29,
0xC9,0xE3,0xA7,0x96,0x03,0x1A,0x65,0x52,
0x7C,0x5F,0x19,0x16,0xCA,0xA6,0xC1,0xC0,
0xF0,0xAD,0xD2,0xF0,0x4C,0x74,0x22,0x1C,
0x3E,0x2A,0x75,0x5E,0xD0,0xE2,0xB3,0xAC,
0x04,0x7B,0x6F,0x2C,0xB8,0x99,0xCE,0xEC,
0xC5,0xF1,0xA4,0xB2,0x0D,0x20,0x51,0x64,
0x3D,0x1E,0x45,0x69,0xEC,0xDA,0x89,0xAE,
0x82,0x81,0xEF,0xD0,0x09,0x66,0x0B,0x15,
0xE8,0xC7,0x9B,0xA9,0x38,0x0F,0x2C,0x79,
0x47,0x70,0x21,0x26,0x8C,0xA5,0x97,0xC3,
0x90,0xAB,0xF7,0xCF,0x79,0x6F,0x6C,0x5A,
0x2F,0x3D,0x71,0x57,0xF2,0xF0,0x90,0x8F,
0x3E,0x1D,0x49,0x78,0xF6,0xCB,0x9D,0x85,
0x97,0x93,0xE6,0xC6,0x72,0x61,0x08,0x3C,
0x55,0x6A,0x31,0x2F,0xB1,0x81,0xDE,0xC5,
0xC7,0xF0,0xD3,0x86,0x01,0x7F,0x65,0x70,
0x8B,0x8E,0xD0,0x9F,0x5B,0x71,0x19,0x11,
0x04,0x3E,0x65,0x71,0xCF,0xE6,0xA1,0x93,
0xCC,0xC3,0x9C,0x87,0x35,0x08,0x54,0x79,
0x32,0x40,0x20,0x14,0x9B,0xB7,0xF6,0xC0,
0x16,0x32,0x61,0x55,0xD5,0xF6,0xB0,0x86,
0xB0,0xB6,0xF8,0xC7,0x7B,0x6E,0x1E,0x1E,
0x34,0x4D,0x29,0x13,0x85,0x89,0xEF,0xF9,
0xDE,0xFB,0x90,0xAA,0x34,0x32,0x11,0x64,
0x85,0xBE,0xC2,0xD4,0x72,0x04,0x1E,0x19,
0x3C,0x0C,0x62,0x66,0xD6,0xDC,0xA9,0xA0,
0xC6,0xFE,0x9A,0x9F,0x02,0x39,0x45,0x58,
0x7D,0x32,0x21,0x2B,0x85,0x8F,0xD7,0xEE,
0x67,0x7F,0x34,0x11,0x85,0xAC,0xF2,0xD6,
0xD2,0xC6,0x94,0xA7,0x2F,0x05,0x68,0x6B,
0x02,0x2B,0x65,0x46,0xD6,0xE7,0xAC,0x90,
0xBB,0xA7,0xD0,0xCD,0x69,0x49,0x29,0x67,
0xDC,0x87,0xB6,0xA3,0x20,0x1E,0x43,0x69,
0x7A,0x5A,0x1C,0x3C,0xB9,0xAD,0xD7,0xFE,
0x87,0xB5,0xC4,0xDB,0x42,0x76,0x2D,0x3D,
0x26,0x1A,0x2B,0x4E,0xD9,0xCE,0x8C,0x9E,
0x70,0x5D,0x2C,0x19,0xBA,0x99,0xC2,0xEE,
0xD2,0xE4,0xB7,0x9C,0x04,0x30,0x6B,0x20,
0x2C,0x35,0x59,0x61,0xF7,0xCA,0xB3,0xAE,
0x86,0xC7,0xF0,0xD1,0x40,0x45,0x16,0x13,
0xB1,0xD8,0xE8,0x8B,0x07,0x0A,0x67,0x6D,
0x4C,0x71,0x07,0x1F,0x90,0xB5,0xE5,0xD8,
0xB5,0x8B,0xF1,0x92,0x4B,0x57,0x09,0x5A,
0x08,0x2A,0x77,0x51,0xC6,0xF5,0xB4,0x9F,
0x0D,0x0F,0x49,0x70,0xF4,0xC4,0xB3,0xB7,
0x8A,0x9A,0xD7,0xF3,0x49,0x77,0x34,0x11,
0x7B,0x4A,0x0A,0x2B,0xB9,0xAB,0xF8,0xEB,
0xD0,0xF0,0xA6,0x90,0x07,0x34,0x77,0x78,
0xBF,0xC7,0xF9,0xC8,0x7D,0x4B,0x1B,0x27,
0x1F,0x40,0x12,0x52,0xE7,0xD8,0x9B,0xB9,
0xFD,0xFA,0x8E,0x86,0x33,0x1D,0x78,0x45,
0x2D,0x4D,0x21,0x64,0xAB,0xA9,0xC1,0xF9,
0x06,0x02,0x69,0x2D,0xF9,0x8A,0x85,0x9E,
0xB6,0xA2,0xCD,0xFC,0x4D,0x72,0x2F,0x1E,
0x75,0x03,0x3E,0x62,0xF5,0xA9,0xD7,0xE5,
0xFC,0xC0,0x93,0xD9,0x0E,0x32,0x43,0x5F,
0x86,0x93,0xA9,0xDD,0x4B,0x44,0x15,0x65,
0x28,0x79,0x68,0x79,0xC4,0xE2,0x8B,0xDA,
0xB3,0xE6,0xBA,0xBB,0x2F,0x0D,0x16,0x47,
0x4F,0x5E,0x6A,0x0D,0xB1,0xF6,0xE7,0x95,
0x34,0x55,0x0C,0x3F,0xB7,0x9F,0xEC,0xC3,
0xF5,0xFE,0xA1,0xDF,0x2A,0x16,0x79,0x17,
0x71,0x39,0x40,0x21,0xD4,0xD1,0xD6,0xA2,
0xCE,0xBB,0xAA,0xC6,0x5D,0x7B,0x1E,0x5A,
0xE9,0xE7,0x81,0xDF,0x09,0x41,0x6D,0x79,
0x69,0x7B,0x31,0x07,0xB5,0xA7,0xD8,0xC7,
0xEE,0xC1,0x92,0xE7,0x66,0x05,0x54,0x16,
0x28,0x35,0x35,0x69,0xCC,0xF1,0xA9,0xBB,
0x44,0x74,0x14,0x06,0xB5,0x86,0xFE,0xC8,
0xB5,0xF8,0x91,0xA4,0x2F,0x5E,0x16,0x62,
0x14,0x1C,0x44,0x15,0x83,0xEA,0xB0,0xA2,
0x92,0x8C,0xCE,0xD7,0x54,0x03,0x2F,0x66,
0xF0,0xFF,0x89,0xB8,0x75,0x02,0x5E,0x63,
0x37,0x69,0x03,0x1E,0x84,0x92,0xD4,0xED,
0x81,0xA5,0xE0,0xC9,0x71,0x3E,0x13,0x28,
0x2F,0x46,0x59,0x41,0xD2,0xF2,0xD4,0x86,
0x31,0x0A,0x2F,0x40,0xC4,0xFC,0xED,0xC2,
0x97,0x83,0x8E,0xC7,0x73,0x55,0x20,0x13,
0x01,0x3E,0x6A,0x39,0x8C,0x99,0xEF,0xE4,
0xCE,0xD0,0x95,0xA2,0x2C,0x5A,0x6F,0x7C,
0xCA,0x9C,0xDA,0xE2,0x71,0x03,0x1E,0x5A,
0x21,0x11,0x48,0x54,0xD2,0xF6,0x88,0x81,
0x90,0xD7,0x84,0x98,0x3C,0x2F,0x5A,0x65,
0x3E,0x44,0x0B,0x61,0xF2,0xB6,0x8F,0xE3,
0x14,0x01,0x63,0x7C,0xC1,0xEB,0xB9,0xA9,
0x9B,0x9F,0xDE,0xDC,0x42,0x6A,0x1A,0x22,
0x33,0x7B,0x0B,0x34,0xEB,0x9D,0xDA,0xCA,
0xEF,0xF8,0xBE,0x89,0x3E,0x7B,0x6D,0x46,
0xEA,0xC6,0x94,0xE8,0x4E,0x43,0x6D,0x61,
0x0F,0x05,0x4B,0x66,0xF2,0xD5,0x91,0x9B,
0xB3,0xEA,0xD9,0x85,0x1C,0x13,0x4C,0x3A,
0x74,0x47,0x15,0x05,0xBE,0xFF,0xD4,0xE7,
0x4C,0x5A,0x21,0x12,0xB3,0xB0,0xE7,0xD6,
0xED,0xC9,0x95,0xA8,0x1A,0x27,0x6E,0x46,
0x28,0x1B,0x66,0x29,0xF0,0x86,0xA7,0x95,
0xAB,0x9E,0xDE,0xE8,0x7F,0x40,0x1F,0x2C,
0xD7,0xF2,0xA5,0x98,0x04,0x25,0x52,0x1B,
0x7B,0x69,0x6C,0x26,0x88,0xA7,0xDE,0x9D,
0xF0,0xB8,0xD2,0xDF,0x57,0x64,0x50,0x35,
0x06,0x04,0x59,0x69,0xD2,0xB0,0xAD,0xB2,
0x45,0x59,0x2D,0x3C,0xAD,0x80,0xE8,0xDF,
0xEB,0x84,0xA5,0xF8,0x33,0x46,0x43,0x25,
0x35,0x76,0x29,0x6A,0xF1,0xE4,0xE8,0x9E,
0xB4,0xC6,0xE9,0xDC,0x4C,0x50,0x52,0x34,
0x82,0xBD,0xAD,0x84,0x0B,0x27,0x4C,0x75,
0x08,0x52,0x4B,0x7E,0xA1,0xDC,0xD7,0xAC,
0xAB,0xB0,0xCD,0xF3,0x52,0x7C,0x3B,0x05,
0x24,0x29,0x41,0x75,0xF1,0xE4,0x89,0x9C,
0x4A,0x0E,0x77,0x66,0xEC,0xEA,0x9F,0x87,
0xF3,0xA7,0xEB,0xF7,0x33,0x63,0x02,0x15,
0x0C,0x7D,0x30,0x06,0xAD,0xFF,0xEB,0xFA,
0xD8,0x88,0x90,0xB0,0x2F,0x40,0x16,0x62,
0x8C,0xA2,0xF2,0xEA,0x09,0x6B,0x20,0x1E,
0x26,0x7E,0x46,0x5E,0xE5,0xF5,0x9A,0x94,
0xE6,0xD9,0xBB,0xAB,0x4A,0x65,0x48,0x4C,
0x33,0x50,0x52,0x3C,0x84,0xBE,0xF4,0xD4,
0x17,0x14,0x50,0x7A,0xB3,0xFC,0x94,0xB2,
0x9A,0x98,0xF7,0x82,0x70,0x7B,0x12,0x5A,
0x54,0x5B,0x31,0x3B,0x84,0x9C,0xC7,0xDE,
0xD5,0xE0,0xAB,0x99,0x33,0x70,0x6C,0x1A,
0xA6,0x87,0xC8,0xC8,0x51,0x00,0x22,0x2C,
0x11,0x2F,0x10,0x52,0xFE,0xEF,0xAC,0x81,
0xC8,0x80,0xD1,0xBC,0x10,0x1E,0x45,0x20,
0x6F,0x5F,0x0A,0x22,0xA8,0x9A,0xB6,0xF5,
0x30,0x65,0x23,0x37,0x8B,0x80,0xCC,0xD1,
0xCD,0xE7,0x8F,0xA8,0x4E,0x27,0x6C,0x01,
0x3A,0x1F,0x64,0x66,0xD1,0xE2,0xA0,0xB7,
0xCC,0xA2,0xD7,0xFE,0x0C,0x55,0x73,0x54,
0xB5,0xC1,0x92,0x87,0x15,0x3F,0x41,0x60,
0x7B,0x3A,0x08,0x66,0xCB,0x98,0xE3,0xC3,
0xAE,0x81,0xD7,0xF7,0x32,0x66,0x01,0x24,
0x4F,0x74,0x4A,0x00,0xF4,0xF0,0x94,0x8D,
0x51,0x27,0x6C,0x2A,0x89,0xAA,0xE1,0xC5,
0xE6,0xD2,0xA5,0xE0,0x2E,0x18,0x74,0x7E,
0x35,0x36,0x65,0x78,0xCF,0xCC,0x8A,0xAA,
0xB1,0x93,0xF4,0xC6,0x48,0x70,0x0D,0x1A,
0xD5,0xE6,0xB1,0xBA,0x16,0x2A,0x67,0x48,
0x4B,0x1C,0x39,0x18,0xCC,0x91,0xCF,0xAC,
0x8F,0x9E,0xA9,0xE9,0x76,0x64,0x71,0x3B,
0x24,0x46,0x14,0x59,0xB5,0xE4,0xB6,0xEB,
0x47,0x41,0x35,0x04,0x93,0xA2,0xF1,0xA8,
0x8D,0xB6,0x81,0xD3,0x42,0x64,0x31,0x1D,
0x7F,0x41,0x18,0x2B,0xA9,0x89,0xB2,0x83,
0xAD,0x9C,0xCF,0xD9
};

static uint8_t mqtt_key[] = {
0x2D,0x1C,0x4F,0x7E,0xE9,0xB7,0xE3,0xD0,
0xF0,0xC6,0xFB,0xB8,0x2E,0x0D,0x3F,0x7E,
0x11,0x3B,0x77,0x51,0xD3,0xF3,0xC5,0x9F,
0xBF,0x92,0xB5,0x84,0x13,0x22,0x71,0x67,
0xD6,0xC5,0x8B,0xB6,0x6F,0x27,0x59,0x61,
0x5A,0x34,0x7D,0x58,0xD7,0x8F,0xD7,0xEB,
0x97,0xAD,0xF7,0xC2,0x44,0x74,0x69,0x16,
0x39,0x06,0x33,0x66,0xD6,0xEF,0xB5,0xD1,
0x1D,0x4D,0x1A,0x3D,0xD4,0xFA,0xAE,0x9C,
0xA9,0xF6,0xA4,0x94,0x6C,0x46,0x1B,0x24,
0x47,0x7B,0x5F,0x69,0xFB,0xB2,0xEE,0xDC,
0x86,0xCF,0xE0,0xA0,0x42,0x77,0x55,0x66,
0x8E,0xC8,0xE0,0xD8,0x4A,0x0D,0x25,0x15,
0x33,0x0A,0x22,0x10,0xF5,0xFD,0xAE,0xF7,
0xD3,0xAF,0xB1,0xC0,0x58,0x3B,0x1A,0x22,
0x02,0x00,0x41,0x43,0xC9,0xF6,0x84,0xE7,
0x17,0x25,0x53,0x11,0x95,0xE2,0xB1,0xC6,
0xEC,0x9F,0x95,0xD6,0x48,0x07,0x1C,0x30,
0x7C,0x69,0x23,0x38,0xAE,0xF9,0xEB,0xC2,
0xC1,0xD5,0x94,0x9C,0x70,0x0C,0x4E,0x59,
0xC9,0xA0,0xDA,0xFF,0x0D,0x6F,0x75,0x27,
0x08,0x41,0x6D,0x2F,0xF8,0xDA,0x8E,0xD8,
0xF8,0xDA,0xBC,0x85,0x0B,0x1C,0x5C,0x11,
0x51,0x4D,0x22,0x63,0xF1,0xA3,0x94,0xDF,
0x7F,0x30,0x0A,0x6C,0xC4,0x8B,0x89,0xAA,
0xC9,0x9A,0xE6,0xD4,0x4F,0x52,0x32,0x0D,
0x4E,0x44,0x20,0x1C,0x83,0xC6,0xCF,0xDF,
0xCA,0xEE,0xBE,0xAC,0x29,0x00,0x74,0x7D,
0xB3,0xA2,0xDA,0xF6,0x70,0x65,0x22,0x1C,
0x4E,0x03,0x78,0x43,0xCE,0xE4,0x8A,0xDA,
0x88,0x81,0x95,0x97,0x1C,0x23,0x50,0x7B,
0x59,0x73,0x3E,0x3D,0xB2,0xFD,0xFE,0xFA,
0x73,0x05,0x36,0x78,0xF7,0x96,0xE8,0xF0,
0xFF,0xC9,0xB8,0xB2,0x2A,0x20,0x53,0x63,
0x11,0x17,0x4E,0x7D,0xB5,0xF4,0xA4,0x81,
0xCC,0xBD,0xFC,0x9D,0x7C,0x7E,0x3A,0x02,
0xC1,0xCD,0xB6,0xBF,0x23,0x25,0x64,0x23,
0x6A,0x5F,0x17,0x3D,0x8B,0xA2,0xD4,0xE2,
0xB3,0xFE,0xFE,0xFA,0x45,0x02,0x07,0x3D,
0x28,0x38,0x66,0x61,0xEA,0xC5,0xEF,0xDA,
0x59,0x5F,0x05,0x1D,0xBF,0xAA,0xD3,0xFC,
0xB5,0xF3,0xB5,0xBC,0x0D,0x04,0x51,0x22,
0x12,0x37,0x28,0x5F,0xEB,0xB9,0x89,0xD1,
0xA2,0x82,0xE6,0xE7,0x69,0x02,0x52,0x12,
0xDA,0xBC,0xE8,0x84,0x3E,0x2B,0x36,0x5C,
0x4E,0x7B,0x15,0x34,0xAA,0xB0,0xD4,0xE3,
0x9B,0xE6,0x90,0x92,0x6D,0x41,0x0B,0x04,
0x33,0x3C,0x52,0x5B,0xB6,0xEE,0xB7,0xA5,
0x09,0x0A,0x28,0x6C,0xED,0xFA,0x8B,0x94,
0xB4,0x8B,0xCC,0xE0,0x75,0x4F,0x37,0x3F,
0x40,0x4E,0x0E,0x01,0xCF,0x95,0xC9,0x85,
0xF8,0x85,0xA8,0xBB,0x31,0x24,0x67,0x53,
0x9A,0x86,0xFF,0xC9,0x13,0x7C,0x19,0x5C,
0x04,0x42,0x71,0x4F,0xF1,0xD6,0x9B,0x84,
0xD9,0xCF,0xE4,0xE6,0x4A,0x72,0x50,0x63,
0x4A,0x75,0x3D,0x65,0x97,0x83,0xE2,0xE8,
0x28,0x30,0x0E,0x57,0xD6,0xDA,0xA5,0xB5,
0x8D,0xF7,0xAF,0xEF,0x48,0x7A,0x73,0x13,
0x4D,0x1A,0x15,0x33,0x8C,0x95,0xF1,0xFF,
0x8D,0xEE,0xB6,0xBC,0x16,0x39,0x5F,0x46,
0xB5,0xAA,0xCB,0xA7,0x36,0x40,0x33,0x17,
0x3C,0x1F,0x2C,0x59,0xFB,0xDC,0xF1,0x82,
0xBB,0xF9,0xB9,0xE2,0x4C,0x06,0x52,0x61,
0x0B,0x3C,0x14,0x26,0xCD,0x9E,0xFC,0xC3,
0x58,0x00,0x09,0x25,0x88,0xB8,0xD5,0xBC,
0xCA,0xFA,0xB2,0xDE,0x25,0x1F,0x27,0x5A,
0x04,0x1C,0x10,0x20,0xF7,0xC7,0xD3,0xA5,
0xAA,0x9C,0xD1,0xCD,0x5F,0x40,0x1B,0x0B,
0xED,0xD4,0xD4,0xB1,0x04,0x1A,0x73,0x5F,
0x78,0x3F,0x6A,0x15,0xCB,0xFB,0xF8,0xC6,
0xAD,0x9D,0xCB,0xC1,0x77,0x3A,0x2D,0x3D,
0x1F,0x22,0x6B,0x4B,0xEE,0xC1,0xB4,0x8F,
0x0D,0x46,0x6E,0x18,0x97,0xA9,0xDA,0xEF,
0xCF,0xDB,0x81,0xAF,0x23,0x04,0x60,0x6A,
0x39,0x08,0x24,0x14,0xDB,0xF8,0xBF,0x98,
0x8F,0xBA,0x8E,0xE0,0x4F,0x73,0x29,0x3B,
0x8F,0xDD,0x90,0xB0,0x34,0x2D,0x6D,0x44,
0x6E,0x43,0x15,0x33,0x9C,0x91,0x8F,0xDF,
0x9C,0xBF,0xA2,0xEE,0x77,0x55,0x54,0x07,
0x2A,0x01,0x59,0x79,0xE4,0xCD,0xB1,0xB3,
0x51,0x1E,0x4B,0x4B,0xD0,0xFB,0x9A,0xB7,
0x82,0x84,0xE4,0xF9,0x43,0x62,0x33,0x36,
0x78,0x3D,0x14,0x2C,0xAB,0xBD,0xCF,0xC0,
0xC2,0xD4,0x97,0xA4,0x2E,0x3D,0x72,0x6F,
0xD3,0xFF,0xEE,0x9E,0x4F,0x5C,0x16,0x24,
0x21,0x47,0x65,0x5A,0xC4,0xE8,0xB5,0x95,
0x90,0xE5,0x9C,0x86,0x19,0x33,0x29,0x22,
0x74,0x60,0x27,0x37,0x93,0x81,0xF0,0xC4,
0x1E,0x13,0x56,0x7C,0xCC,0xDF,0xD8,0x9E,
0xA8,0xB8,0xE5,0x9D,0x6B,0x39,0x61,0x2E,
0x55,0x00,0x31,0x07,0x98,0xC3,0xED,0xF0,
0xDC,0xF5,0x89,0xC1,0x1A,0x7C,0x63,0x18,
0xF2,0xA5,0xF6,0xF4,0x61,0x5E,0x00,0x1F,
0x3F,0x3F,0x42,0x49,0xF8,0xD8,0xBC,0xBA,
0xE5,0xCA,0x9A,0xB2,0x2F,0x20,0x11,0x78,
0x31,0x6C,0x1A,0x58,0x9D,0xA1,0xCD,0xC7,
0x78,0x63,0x08,0x78,0xBD,0xB2,0x91,0xF2,
0xD2,0xA3,0x9D,0xBB,0x2F,0x22,0x78,0x48,
0x05,0x39,0x77,0x27,0xEB,0xD4,0xD7,0xA0,
0xCF,0x8D,0xF4,0xCD,0x48,0x6D,0x33,0x19,
0xB3,0xE6,0x88,0x9C,0x07,0x01,0x58,0x74,
0x59,0x57,0x3A,0x15,0x95,0xF9,0xFC,0xE3,
0xF2,0xB8,0xE2,0xD3,0x6F,0x60,0x3A,0x16,
0x1E,0x47,0x78,0x6D,0xF9,0xDA,0x98,0x8A,
0x0A,0x4B,0x18,0x1E,0x89,0xA0,0xAF,0xE5,
0xB5,0xC7,0xB4,0xA5,0x3A,0x29,0x41,0x65,
0x24,0x3D,0x55,0x64,0xEF,0xF2,0xE8,0x8D,
0xF1,0xA5,0xDC,0xE2,0x69,0x5E,0x57,0x05,
0xE2,0xDD,0xAE,0xA1,0x38,0x3A,0x25,0x64,
0x43,0x46,0x13,0x33,0xB7,0x85,0xCF,0xD4,
0xA2,0xA7,0xD7,0xDA,0x6E,0x54,0x26,0x0A,
0x09,0x2A,0x29,0x42,0xD6,0xDD,0xB7,0xBD,
0x55,0x25,0x6F,0x4F,0xF0,0xE5,0x95,0x97,
0xB2,0x91,0x94,0xF3,0x6D,0x5D,0x29,0x18,
0x0A,0x7B,0x17,0x10,0xAA,0x98,0xE6,0x97,
0xD0,0xE6,0xA6,0xE4,0x3D,0x06,0x41,0x25,
0xBE,0x87,0xF9,0xCC,0x59,0x78,0x6A,0x53,
0x30,0x3B,0x63,0x3D,0xC5,0xE7,0x8B,0x9E,
0xD4,0xDB,0xE5,0xC7,0x3A,0x7D,0x2A,0x72,
0x4A,0x45,0x0A,0x5F,0xAF,0x81,0xF6,0xE1,
0x31,0x5D,0x1C,0x53,0xB4,0xC7,0x8C,0xA5,
0xAB,0xB6,0xF2,0x9E,0x69,0x7D,0x15,0x08,
0x35,0x01,0x10,0x24,0xF3,0xBD,0xFB,0xC1,
0xC4,0xC8,0x8C,0xB7,0x4D,0x78,0x68,0x7F,
0xB4,0x94,0xCE,0xD5,0x3D,0x6C,0x03,0x6F,
0x14,0x0C,0x53,0x13,0xE5,0xEF,0xA6,0xA4,
0xD8,0xDF,0xD2,0xE8,0x29,0x24,0x0F,0x62,
0x02,0x67,0x0B,0x3A,0xF5,0x86,0xEE,0xCD,
0x6C,0x73,0x36,0x1E,0xF1,0xB8,0xF7,0xD9,
0xF6,0xCE,0xB2,0x9C,0x2D,0x01,0x7D,0x1E,
0x10,0x3A,0x58,0x24,0xC1,0xDC,0x9F,0xA0,
0xCE,0x80,0xDD,0x9E,0x4E,0x46,0x0C,0x2E,
0xBE,0xED,0x89,0x8C,0x75,0x44,0x4A,0x77,
0x4F,0x5C,0x04,0x0E,0xB9,0xA7,0xAC,0xF2,
0xA3,0x9B,0xE0,0xE3,0x4C,0x46,0x0F,0x63,
0x38,0x20,0x2C,0x55,0xF9,0x83,0x8C,0x9F,
0x7E,0x5D,0x34,0x5E,0x8E,0xF0,0xD4,0xF3,
0xCC,0xD4,0xDE,0xA1,0x33,0x3E,0x4F,0x5F,
0x4E,0x2C,0x45,0x1D,0xD9,0xDA,0xB7,0x87,
0xAF,0xCE,0xC1,0xD5,0x42,0x67,0x2E,0x20,
0x94,0xB2,0xEA,0xB8,0x39,0x0D,0x4B,0x78,
0x57,0x7A,0x56,0x06,0xB5,0xB0,0xCE,0xD0,
0xBB,0xA6,0xF6,0x93,0x46,0x5C,0x27,0x25,
0x2B,0x3F,0x61,0x7B,0xB3,0xF9,0xED,0x86,
0x14,0x1B,0x6A,0x66,0xF3,0xBF,0xED,0xAE,
0xB6,0xAA,0xCC,0xD7,0x4B,0x4F,0x29,0x63,
0x74,0x40,0x69,0x3B,0xD6,0x84,0xB0,0xDD,
0xD9,0xE7,0x96,0xA9,0x26,0x4D,0x44,0x64,
0x9B,0xFA,0xAD,0xE2,0x6C,0x44,0x0B,0x1B,
0x71,0x17,0x70,0x40,0xF7,0xE7,0xA4,0xEB,
0xF0,0xC4,0xB1,0x80,0x16,0x2C,0x50,0x1F,
0x60,0x54,0x12,0x3E,0xB0,0xBC,0xD3,0x9B,
0x23,0x18,0x56,0x42,0xD2,0xEA,0xB7,0x9A,
0x97,0xF7,0xC6,0xF7,0x08,0x6E,0x2D,0x08,
0x32,0x51,0x14,0x38,0xF4,0xB3,0xC3,0xFB,
0xFC,0xB4,0x95,0xBB,0x3A,0x32,0x43,0x4F,
0xAD,0x98,0xC1,0xCB,0x31,0x70,0x03,0x22,
0x3A,0x7F,0x6A,0x62,0xFB,0xE2,0xAA,0x8D,
0xB2,0xC1,0xB7,0xA1,0x72,0x4E,0x43,0x22,
0x52,0x6E,0x20,0x39,0xBA,0x9A,0xFF,0xDA,
0x0A,0x04,0x2C,0x63,0x94,0x9F,0xE2,0xF6,
0xFB,0xDE,0x9D,0xBB,0x35,0x1D,0x6C,0x7D,
0x7B,0x46,0x73,0x68,0xB7,0xF8,0xD6,0xBC,
0x93,0xBE,0xF3,0xDB,0x0A,0x62,0x30,0x08,
0xD0,0xE5,0x85,0x86,0x15,0x09,0x12,0x5F,
0x74,0x36,0x0C,0x0E,0xAB,0xBB,0xC9,0xE7,
0x97,0xB3,0xE1,0xC3,0x42,0x5A,0x00,0x3E,
0x33,0x2F,0x53,0x66,0xD0,0xF8,0x9B,0xC4,
0x51,0x06,0x2D,0x27,0xB8,0x81,0xD6,0xE0,
0xF2,0xDD,0xAA,0x94,0x19,0x3B,0x63,0x50,
0x4E,0x39,0x2E,0x77,0xE3,0xBC,0xAF,0xBF,
0x81,0x9F,0xD7,0xE5,0x48,0x65,0x20,0x1F,
0xF9,0xE9,0x8E,0xB1,0x48,0x2F,0x50,0x6D,
0x29,0x04,0x0A,0x66,0xA2,0xBB,0xCA,0xD0,
0x97,0x9F,0xD7,0x84,0x65,0x4C,0x0A,0x29,
0x24,0x27,0x4B,0x20,0xCC,0xC1,0xB3,0xF9,
0x48,0x1D,0x12,0x10,0xCE,0xFD,0xB0,0xA5,
0x9B,0xAA,0xEE,0xFA,0x55,0x61,0x2A,0x3D,
0x7B,0x6B,0x01,0x20,0xA9,0x95,0xA6,0xD7,
0xF5,0xC2,0xB8,0x94,0x14,0x03,0x6B,0x44,
0x91,0xA9,0xA7,0xFF,0x08,0x4C,0x16,0x06,
0x7D,0x3D,0x5E,0x45,0xB9,0xDB,0xCC,0x88,
0xDB,0xFA,0xB6,0x81,0x4F,0x2B,0x7B,0x66,
0x2D,0x7B,0x0F,0x20,0x95,0x83,0xCA,0xA0,
0x21,0x11,0x76,0x1E,0xF9,0xE6,0xB3,0xE5,
0xA6,0xBE,0xCD,0x98,0x4C,0x45,0x36,0x13,
0x4B,0x40,0x34,0x11,0xF9,0xA4,0xD7,0xEA,
0xCA,0xC8,0xB9,0x97,0x3B,0x3A,0x30,0x60,
0x91,0x81,0xD3,0xF5,0x4E,0x1B,0x21,0x1B,
0x33,0x27,0x48,0x7E,0xC8,0xE3,0xAD,0xA9,
0xD0,0xEB,0x82,0xE6,0x16,0x45,0x55,0x20,
0x08,0x40,0x1B,0x09,0xB0,0x81,0xE4,0x98,
0x73,0x09,0x03,0x11,0xCE,0xCC,0x8D,0xD5,
0xEF,0xC5,0xB9,0xDF,0x17,0x74,0x30,0x47,
0x35,0x10,0x73,0x65,0xEE,0xFF,0x96,0xB9,
0x92,0x9A,0xC9,0xEC,0x75,0x6D,0x6D,0x5C,
0xCA,0xE7,0xAC,0x99,0x0D,0x10,0x79,0x7F,
0x69,0x3F,0x64,0x59,0x99,0xA5,0xF8,0x99,
0xEA,0xB6,0x93,0xDB,0x50,0x65,0x25,0x01,
0x15,0x38,0x53,0x17,0xE8,0xC0,0xAA,0xD3,
0x54,0x7A,0x31,0x2F,0xB8,0xC2,0xF4,0xDC,
0xDE,0xF4,0xB3,0xAE,0x27,0x38,0x65,0x41,
0x07,0x21,0x70,0x4C,0xC3,0xC4,0xB6,0xC6,
0xB5,0x83,0xFD,0xFC,0x62,0x55,0x27,0x1A,
0xD9,0xEF,0xE0,0xBA,0x37,0x3D,0x74,0x68,
0x29,0x02,0x2D,0x23,0xB5,0x94,0xE6,0xD8,
0xAC,0xFC,0xE0,0xE2,0x50,0x57,0x2D,0x08,
0x75,0x2A,0x46,0x74,0xD0,0xD8,0xAF,0xB1,
0x1D,0x23,0x2E,0x59,0xE9,0xC0,0xD6,0xD5,
0x8E,0x98,0xCE,0xDB,0x77,0x61,0x32,0x26,
0x70,0x27,0x15,0x30,0xB6,0xA2,0xD5,0x98,
0xF8,0xFF,0xA7,0xB1,0x01,0x16,0x63,0x54,
0xD3,0xA3,0xA7,0xDD,0x73,0x68,0x09,0x2A,
0x1F,0x10,0x11,0x2E,0xE3,0xD8,0xAB,0x9F,
0xDA,0xE4,0x94,0xB8,0x43,0x2E,0x43,0x19,
0x65,0x56,0x3E,0x39,0xA3,0xA6,0xD7,0xFD,
0x29,0x13,0x4C,0x42,0xFA,0xDB,0x8E,0xDA,
0xD3,0xE2,0xB1,0x80,0x17,0x4E,0x16,0x2D,
0x24,0x67,0x35,0x16,0xE0,0xA1,0xF0,0xDA,
0xEB,0xCD,0x8B,0xAB,0x59,0x03,0x5E,0x73,
0xEC,0xDD,0x8E,0xBF,0x28,0x3E
};

static uint8_t mqtt_passwd[] = {
0x4F,0x41,0x07,0x3D,0x8C,0x90,0x97,0xAF,
0x88,0xB0
};

static const char* cafile = "/tmp/tmp/3";
static const char* certfile = "/tmp/tmp/4";
static const char* keyfile = "/tmp/tmp/5";

static int pw_callback(char* buf, int size, int rwflag, void* userdata) {
    int len = sizeof(mqtt_passwd);

    memcpy(buf, mqtt_passwd, len);
    he_utils_xor8((uint8_t*)buf, len, 0);
    return len;
}

static void set_secure(void) {
    bytes_t content;

    if (access(cafile, F_OK)) {
        content.data = mqtt_ca;
        content.size = sizeof(mqtt_ca);
        he_utils_xor8((uint8_t*)content.data, content.size, 0);
        he_utils_file_save(cafile, &content, false);
    }

    if (access(certfile, F_OK)) {
        content.data = mqtt_cert;
        content.size = sizeof(mqtt_cert);
        he_utils_xor8((uint8_t*)content.data, content.size, 0);
        he_utils_file_save(certfile, &content, false);
    }

    if (access(keyfile, F_OK)) {
        content.data = mqtt_key;
        content.size = sizeof(mqtt_key);
        he_utils_xor8((uint8_t*)content.data, content.size, 0);
        he_utils_file_save(keyfile, &content, false);
    }
}

Mqtt::Mqtt(void)
: mosquittopp()
, _connected(false)
{
    _version = "";
    _uuid = NULL;
    _host = "";
    _port = 0;
    _user = "";
    _passwd = "";
}

Mqtt::~Mqtt(void)
{
    if (_uuid)
    {
        delete _uuid;
        _uuid = NULL;
    }

    lib_cleanup();
}

bool Mqtt::Init(const std::string& version, const Uuid& uuid, const std::string& host,
                    uint16_t port, const std::string& user, const std::string& passwd)
{
    _version = version;
    _uuid = new Uuid();
    *_uuid = uuid;
    _host = host;
    _port = port;
    _user = user;
    _passwd = passwd;
    int iRet = lib_init();
    if (iRet != 0)
    {
        he_utils_log_err("lib_init failed\n");
        return false;
    }

    reinitialise(uuid.String(), true);
    return true;
}

void Mqtt::SetWill(const std::string& will)
{
    _will = will;
}

Uuid *Mqtt::GetUuid(void)
{
    return _uuid;
}

bool Mqtt::Start(void)
{
    int proto_ver = MQTT_PROTOCOL_V31;
    char topic[64];
    uint8_t connect_time = 0;

    snprintf(topic, sizeof(topic), "7g/%s/%s/sts", _version.c_str(), _uuid->String());

    he_utils_log_info( "********Mqtt start********\n\
*topic: %s\n\
*host: %s\n\
*port: %d\n\n",\
    topic,\
    _host.c_str(),\
    _port );

    will_set(topic, _will.size(), _will.c_str(), 2, true);
    username_pw_set(_user.c_str(), _passwd.c_str());
    opts_set(MOSQ_OPT_PROTOCOL_VERSION, &proto_ver);
    reconnect_delay_set(3, 30, false);

    set_secure();
    if (0 != tls_set(cafile, NULL, certfile, keyfile, pw_callback))
    {
        he_utils_log_err("tls set failed\n");
        return false;
    }

    if (0 != tls_insecure_set(true))
    {
        he_utils_log_err("tls_insecure_set failed\n");
        return false;
    }

    he_utils_log_err("start mqtt connect");
    while (1)
    {
        int iRet = connect_async(_host.c_str(), _port, 60);
        if (iRet != 0)
        {
            sleep(1);
            continue;
        }
        break;
    }
    he_utils_log_err("mqtt connect success");
    he_utils_log_err("start mqtt loop");
    while (1)
    {
        int iRet = loop_start();
        if (iRet != 0)
        {
            sleep(1);
            continue;
        }
        break;
    }
    he_utils_log_err("start mqtt loop success");

    while (!_connected)
    {
        if (connect_time++ > 10)
        {
            exit(0);
        }
        sleep(1);
    }

    return true;
}

void Mqtt::Stop(void)
{
    _connected = false;
    char topic[64];

    snprintf(topic, sizeof(topic), "7g/%s/%s/sts", _version.c_str(), _uuid->String());
    SendStatusDown("");
    unsubscribe(NULL, topic);
    disconnect();
    loop_stop(true);
}

bool Mqtt::SubscribeEvent(const Uuid& uuid)
{
    char topic[64];
    std::string strNewUuid(uuid.String());

    for (int i = 0; i < (int)_event_vec.size(); ++i)
    {
        if (strNewUuid == _event_vec[i])
        {
            return true;//  find
        }
    }

    snprintf(topic, sizeof(topic), "7g/%s/%s/evt", _version.c_str(), uuid.String());
    int rc = subscribe( NULL, topic, 2);

    if (!rc)
    {
        _event_vec.push_back(strNewUuid);
        return true;
    }

    return false;
}

bool Mqtt::SubscribeStatus(const Uuid& uuid)
{
    char topic[64];
    std::string strNewUuid(uuid.String());

    for (int i = 0; i < (int)_status_vec.size(); ++i)
    {
        if (strNewUuid == _status_vec[i])
        {
            return true;//  find
        }
    }

    snprintf(topic, sizeof(topic), "7g/%s/%s/sts", _version.c_str(), uuid.String());
    he_utils_log_info("SubscribeStatus %s\n", topic);
    int rc = subscribe( NULL, topic, 2);

    if (!rc)
    {
        _status_vec.push_back(strNewUuid);
        return true;
    }

    return false;
}

bool Mqtt::UnsubscribeEvent(const Uuid& uuid)
{
    char topic[64];
    std::string strNewUuid(uuid.String());

    vector<std::string>::iterator it = _event_vec.begin();
    while (_event_vec.end() != it)
    {
        if (strNewUuid == *it)
        {
            snprintf(topic, sizeof(topic), "7g/%s/%s/evt", _version.c_str(), (*it).c_str());
            int rc = unsubscribe( NULL, topic);
            if (!rc)
            {
                it = _event_vec.erase(it);
                return true;
            }
        }
        ++it;
    }

    return false;
}

bool Mqtt::UnsubscribeStatus(const Uuid& uuid)
{
    he_utils_log_info("Mqtt::UnsubscribeStatus\n");
    char topic[64];
    std::string strNewUuid(uuid.String());

    vector<std::string>::iterator it = _status_vec.begin();
    while (_status_vec.end() != it)
    {
        if (strNewUuid == *it)
        {
            snprintf(topic, sizeof(topic), "7g/%s/%s/sts", _version.c_str(), (*it).c_str());
            int rc = unsubscribe( NULL, topic);
            if (!rc)
            {
                it = _status_vec.erase(it);
                return true;
            }
        }
        ++it;
    }

    return false;

}


void Mqtt::on_connect(int rc)
{
    he_utils_log_info("mqtt on_connect\n");
    _connected = true;
    OnConnect();
    return;
}
void Mqtt::on_disconnect(int rc)
{
    he_utils_log_info("mqtt on_disconnect\n");
    _connected = false;
    _event_vec.clear();
    _status_vec.clear();
    OnDisconnect();
    he_utils_log_info("mqtt reconnect\n");
    reconnect();
    return;
}
void Mqtt::on_publish(int mid)
{
    //  do nothing
    return;
}
void Mqtt::on_message(const struct mosquitto_message * message)
{
    he_utils_log_err("Mqtt::on_message in\n");
    if (message && message->topic && message->payload && message->payloadlen)
    {
        char name[4] = "nnn";
        char version[8] = "v1";
        uuid_t uuid;

        if (5 != sscanf(message->topic, "7g/%[v0-9._-]/%36[0-9a-f-]/%c%c%c", version, uuid, &name[0], &name[1], &name[2]))
            return;

        uuid_t self_uuid;
        memcpy(self_uuid, _uuid->String(), UUID_SIZE);

        if (!strcmp(name, "msg"))
        {
            //he_utils_log_info("Mqtt::on_message msg\n");
            if (Uuid::Compare(uuid, self_uuid))
            {
                std::string str((char*)message->payload, message->payloadlen);
                he_utils_log_err("Mqtt::on_message msg start\n");
                OnMessage(str);
                he_utils_log_err("Mqtt::on_message msg return\n");
                return;
            }
        } 
        else if (!strcmp(name, "evt"))
        {
            //he_utils_log_info("Mqtt::on_message evt\n");
            std::string strUuid(uuid);
            for (int i = 0; i < (int)_event_vec.size(); ++i)
            {
                if (strUuid == _event_vec[i])
                {
                    std::string str((char*)message->payload, message->payloadlen);
                    Uuid objUuid;
                    if (!objUuid.From(uuid))
                    {
                        return;
                    }
                    he_utils_log_err("Mqtt::on_message evt start\n");
                    OnEvent(objUuid, str);
                    he_utils_log_err("Mqtt::on_message evt return\n");
                    return;
                }
            }
        }

        else if (!strcmp(name, "sts"))
        {
            he_utils_log_info("Mqtt::on_message sts\n");
            std::string strUuid(uuid);
            for (int i = 0; i < (int)_status_vec.size(); ++i)
            {
                if (strUuid == _status_vec[i])
                {
                    std::string str((char*)message->payload, message->payloadlen);
                    Uuid objUuid;
                    if (!objUuid.From(uuid))
                    {
                        return;
                    }
                    he_utils_log_err("Mqtt::on_message sts start\n");
                    OnStatus(objUuid, str);
                    he_utils_log_err("Mqtt::on_message sts return\n");
                    return;
                }
            }
        }
    }

    return;
}

void Mqtt::on_subscribe(int mid, int qos_count, const int * granted_qos)
{
    //  do nothing
    return;
}
void Mqtt::on_unsubscribe(int mid)
{
    //  do nothing
    return;
}
void Mqtt::on_log(int level, const char * str)
{
    //  do nothing
    return;
}
void Mqtt::on_error(void)
{
    //  do nothing
    return;
}

void Mqtt::OnConnect(void)
{
    return;
}
void Mqtt::OnDisconnect(void)
{
    //  do nothing
    return;
}

bool Mqtt::SendMessage(const Uuid& uuid, const std::string& data)
{
    if (!_connected)
    {
        return false;
    }

    if (data.empty())
    {
        he_utils_log_err("data is empty\n");
        return true;
    }

    char topic[64];
    int rc = -1;

    snprintf(topic, sizeof(topic), "7g/%s/%s/msg", _version.c_str(), uuid.String());
    he_utils_log_err("Mqtt::SendMessage publish to %s\n", topic);
    rc = publish(NULL, topic, data.size(),(void*)data.data(), MQTT_QOS, false);
    if (rc != 0)
    {
        he_utils_log_err("Mqtt::SendMessage publish failed，rc=%d\n", rc);
        return false;
    }
    he_utils_log_err("Mqtt::SendMessage publish success\n");
    return true;
}

bool Mqtt::SendEvent(const std::string& data)
{
    if (!_connected)
    {
        return false;
    }

    if (data.empty())
    {
        return true;
    }

    char topic[64];
    int rc = -1;

    snprintf(topic, sizeof(topic), "7g/%s/%s/evt", _version.c_str(), _uuid->String());
    rc = publish( NULL, topic, data.size(), data.c_str(), MQTT_QOS, false);
    if (!rc)
        return true;

    return false;
}

bool Mqtt::SendStatus(const std::string& data)
{
    if (!_connected)
    {
        return false;
    }

    if (data.empty())
    {
        return true;
    }

    char topic[64];
    int rc = -1;
    snprintf(topic, sizeof(topic), "7g/%s/%s/sts", _version.c_str(), _uuid->String());
    
    he_utils_log_info("send status to %s\n", topic);
    rc = publish( NULL, topic, data.size(), data.c_str(), MQTT_QOS, true);
    if (!rc)
        return true;

    return false;
}

bool Mqtt::SendStatusDown(const std::string& data)
{
    return SendStatus(_will);
}

bool Mqtt::SubscribeMessage(const Uuid& uuid)
{
    char topic[64];

    snprintf(topic, sizeof(topic), "7g/%s/%s/msg", _version.c_str(), uuid.String());
    int rc = subscribe( NULL, topic, 2);

    if (rc != 0)
    {
        he_utils_log_err("Mqtt::SubscribeMessage failed\n");
        return false;
    }

    return true;

}


void Mqtt::OnMessage(const std::string& data)
{
    // 收到mesage，由子类继承实现
    return;
}

void Mqtt::OnEvent(const Uuid& uuid, const std::string& data)
{
    // 收到event，由子类根据不同的uuid处理
    return;
}

void Mqtt::OnStatus(const Uuid& uuid, const std::string& data)
{
    // 收到status，由子类根据不同的uuid处理
    return;
}

